package day10.com.ict.edu;

public  /*<-접근제한자*/ class Ex01_Class { //<--헤더
	//클래스
	//자바에서의 클래스는 객체(Object)를 정의하는 틀 또는 설계도면 가 같은 의미로 사용 됨
	//객체란 -> 클래스를 바탕으로 만들어진 생성된 것
	
	//클래스가 가지고 있는 것 
	//데이터 = 멤버필드 (변수와 상수)
	//기능 = 동작 = 멤버 메서드
	//생성자 = 클래스가 객체로 만들어질 때 한번 호출되서 데이터를 초기화 할 수 있는 기능을 가짐

	//**클래스이름 = 저장이름 = 파일이름 = 생성자 이름
	//클래스 구조 : 헤더, 멤버필드, 셍성자, 멤버 메서드
	// [] => 배열이 아닌 생략가능하다는 뜻
	//1. 헤더 : [접근 제한자][클래스 종류에 대한 예약어] class 클래스이름 {        }
	//	1) 접근제한자 : 클래스, 멤버필드, 멤버메서드, 생성자 모두 사용할 수 있다.
	// 	            외부에서 접근할 수 있는 권한의 단계를 말함
	//		가) public : 누구나 다 접근 가능    
	//		나) protected : 같은 패키지와 상속관계에서는 접근 가능
	//		다) 생략(default) : 같은 패키지에서만 접근 가능
	//		라) private : 외부에서는 접근 불가, 내부멤버(멤버필드, 멤버메서드)끼리는 접근 가능 
	//		우선순위 public과 private가 1순위
	
	// 	2) 클래스 종류에 대한 예약어 : 일반적인 클래스(직접만든 클래스)는 생략한다.
	//		특정클래스에 해당하는 예약어가 존재한다.(final, abstract....)
	
	//	3) class : 클래스임을 나타내는 예약어
	//	4) 클래스이름 : 클래스이름 = 저장이름 = 파일이름 = 생성자 이름
	//		첫 글자 대문자 나머지는 소문자
	// 		두 단어 이상일 때는 단어 첫 글자들을 대문자
	//		숫자는 중간이나 뒤에 사용, 공백은 사용 불가
	//
	//2. 멤버필드 : 데이터, 상태값, 속성
	//	1) 변수 : 언제든지 변할 수 있는 데이터를 저장하는 공간 
	//		첫 글자 소문자
	// 		두 단어 이상일 때는 단어 첫 글자들을 대문자
	//		숫자는 중간이나 뒤에 사용, 공백은 사용 불가		
	//	2) 상수 : 한번 저장되면 변경할 수 없는 데이터를 저장하는 공간
	//		모든 글자가 다 대문자
	//		단어와 단어 사이에 (_)언더바를 사용할 수 있다.
	
	//3. 멤버메서드 : 동작, 기능, 실행
	//	  - 해당 메서드를 호출(실행)하면 해당 메서드안에 존재한 내용이 실행됨
	//	  - 호출해서 내용이 실행 된 후에는 호출한 곳으로 되돌아 간다.
	//	  - 메서드는 다른 메서드를 호출 할 수 있음
	//	1) 구성 : [public : 접근제한자][메서드종류]변환형 메서드이름(인자=매개변수){실행할 내용}
	//		가) 접근제한자 : public, protected, 생략, private;
	//						(외우는 순서?) : public, private, 생략(default), protected
	//		나) 메서드종류 : 일반 메서드에 해당하는 부분을 생략
	//					 특정메서드에 해당하는 예약어를 사용(static)
	//		다) **반환형 : 헤더 메서드가 실행이 끝나면 호출한 곳으로 되돌아 갈 떄
	//					함께 가지고 가는 결과의 자료형
	//					만약에 결과를 가지고 가지 않으면 void라는 예약어를 사용
	//	2) 메서드이름 : 변수와 같음, 첫글자 소문자 시작, 두 단어 이상일 때 단어 첫글자들은 대문자
	//				 숫자는 중간이나 뒤에 사용, 공백은 사용 불가
	//	3) 인자 = 매개변수 : 보통은 실행할 때 필요한 정보를 외부에서 받기 위한 통로
	//					 생략가능 하며 여러개 사용가능
	//	4) **오버로딩(중복정의) : 메서드 이름이 같으나 인자 수나 인자 자료형이 다르면 다른 메서드로 판단
	//					   즉, 인자의 수 나 자료형이 다르면 같은 이름이 메서드가 여러개 존재할 수 있다.
	//	5) **getter() : 호출하는 입장에서 메서드를 이용해서 정보를 가져오는 메서드
	//	   **setter() : 호출하는 입장에서 메서드를 이용해서 정보를 변경하는 메서드
	//	   변수가 private이면 직접 접근을 할 수 없어서 getter()/setter()을 사용해 접근한다.( = 우회해서 접근가능)
	
	
	//4. 생성자 : 클래스가 객체로 만들어질 때 한번 호출됨
	//	1) 목적 : 멤버필드(변수,상수)의 초기값을 지정
	//	2) 형식 : 클래스이름 = 생성자 (무조건)
	//			 반환형이 없는 메서드의 형태이다.
	// 			 [접근제한자]생성자(클래스)([인자]){ 실행내용 }
	//			 인자가 없는 생성자(괄호안에 아무것도 없음) -> 기본 생성자
	//	생성자 오버로딩 가능
	//  하나의 클래스의 여러개의 생성자가 존재할 수 있음 => 생성자 오버로딩
	//	**모든 클래스는 반드시 생성자르 가지고 있음
	//	해당 클래스의 생성자가 없으면 기본 생성자가 생략되어 있음(숨어있다)
	//	해당 클래스의 생성자가 없으면 객체를 생성할 때 기본 생성자를 호출함
	//	3) 클래스를 이용해서 객체를 만들때 생성자 호출
	// 		Scanner     scan        =        new     Scanner(System.in);
	//		 클래스 		참조변수       =      new예약어         생성자
	// 	클래스를 가리키는 Scanner이나 생성자에있는 Scanner은 서로 다름
	
	//	new 예약어를 사용하면 무조건 heap메모리에 사용영억(저장영역)을 만듬

	//5. 클래스를 객체로 만든 후 멤버필드와 멤버메서드에게 접근하는 방법
	//	 참조변수.멤버필드,	참조변수.멤버메서드(), (단, 접근제한자를 확인)
	//		ex) scan(참조변수).nextInt()(멤버메서드) (.으로 접근)
	
	//6. static 과 instance : 멤버필드, 멤버메서드에서 공통으로 해당하는 사항
	// 		static 과 instance 구분 법
	// 		static은 무조건 static 예약어를 사용(static가 있으면 static이없으면 instance)
	//	1) instance(인스턴스) 필드, 메서드 : 객체가 생성될 때 같이 생성되는 필드와 메서드
	// 								   일반적인 클래스의 멤버필드,멤버메서드는 모두 인스터스이다.
	//		호출방법 : 객체생성한 다음에 호출
	//				참조변수.멤버필드, 참조변수.멤버메서드
	//				Scanner scan = new Scanner(System.in);
	//				scan.nextInt();
	//				heap메모리에 만들어짐

	// 2) static : 객체생성과 상관없이 미리 만들어진 멤버필드와 멤버메서드
	// 			   반드시 static이라는 에약어를 사용
	// 			   객체 생성과 상관없이 언제든 호출 가능
	// 			   호출방법 : 클래스이름.멤버필드, 클래스이름.멤버메서드
	//				ex) System.out, 
	//			   static 메모리에 만들어진다.(공용)
	//			   (단 private하면 접근 못함 : private(접근제한자)가 우선순위가 높아서)
}
